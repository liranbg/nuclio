name: CI

on:
  pull_request:
    branches:
    - development
    - '[0-9]+.[0-9]+.x'

  # Run CI also on push to master
  push:
    branches:
    - master

env:
  REPO_USER: ${{ github.event.repository.owner.login }}
  REPO: docker.pkg.github.com/${{ github.event.repository.owner.login }}
  REPO_NAME: nuclio
  NUCLIO_LABEL: ci-${{ github.event.pull_request.number }}
  NAMESPACE: nuclio
  NUCLIO_GO_TEST_TIMEOUT: "30m"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-go@v2
      with:
        go-version: "^1.14.0"

    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Lint
      run: make lint

  test_short:
    name: Test short
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-go@v2
      with:
        go-version: "^1.14.0"

    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run short test
      run: |
        set -o pipefail
        make test-short 2>&1 | tee test-short-${NUCLIO_LABEL}.log

    - name: Upload short test results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-results
        path: test-short-${{ env.NUCLIO_LABEL }}.log

  build_nuctl:
    name: Build nuctl
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-go@v2
      with:
        go-version: "^1.14.0"

    - name: Build
      run: |
        make nuctl
      env:
        NUCLIO_NUCTL_CREATE_SYMLINK: false

  build_docker_images:
    name: Build docker images
    runs-on: ubuntu-latest
    steps:
    - name: Dump GitHub context
      run: echo "$GITHUB_CONTEXT"
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}

    - name: Dump runner context
      run: echo "$RUNNER_CONTEXT"
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}

    - name: Dump github ref
      run: echo "$GITHUB_REF"

    - uses: actions/checkout@v2

    # since github-actions gives us 14G only, and fill it up with some garbage
    # we will free up some space for us (~2GB)
    - name: Freeing some disk space
      run: docker system prune --all --force

    - name: Build
      run: |
        docker login ${REPO} -u ${REPO_USER} -p ${{ github.token }}
        make docker-images push-docker-images
      env:
        NUCLIO_DOCKER_REPO: ${{ env.REPO }}/${{ env.REPO_NAME }}

  test_k8s_nuctl:
    name: Test Kubernetes nuctl
    runs-on: ubuntu-latest
    needs:
    - build_docker_images
    steps:
    - uses: actions/checkout@v2

    - uses: azure/setup-helm@v1
      with:
        version: "v3.2.4"

    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - uses: manusa/actions-setup-minikube@v1.1.0
      with:
        minikube version: "v1.11.0"
        kubernetes version: "v1.17.8"
        github token: ${{ github.token }}

    - name: Prepare k8s cluster
      run: |
        # login
        docker login ${REPO} -u ${REPO_USER} -p ${{ github.token }}

        # pull images
        make pull-docker-images

        # create nuclio namespace
        kubectl create namespace ${NAMESPACE}

        # run registry to be used during tests
        docker run -d -p 5000:5000 registry:2

        # setting nuctl external ip address to minikube ip
        echo "::set-env name=NUCTL_EXTERNAL_IP_ADDRESSES::$(minikube ip)"

        # install nuclio helm chart
        cat test/k8s/ci_assets/helm_values.yaml \
          | envsubst \
          | helm install --debug --wait --namespace ${NAMESPACE} -f - nuclio hack/k8s/helm/nuclio/

    - name: Run nuctl tests
      run: |
        set -o pipefail
        make test-k8s-nuctl 2>&1 | tee test-k8s-nuctl-${NUCLIO_LABEL}.log
      env:
        NUCLIO_DASHBOARD_DEFAULT_ONBUILD_REGISTRY_URL: ${{ env.REPO }}
        NUCTL_REGISTRY: "localhost:5000"
        NUCTL_NAMESPACE: ${{ env.NAMESPACE }}
        NUCTL_EXTERNAL_IP_ADDRESSES: ${{ env.NUCTL_EXTERNAL_IP_ADDRESSES }}

    - name: Upload test results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: k8s-test-results
        path: test-k8s-nuctl-${{ env.NUCLIO_LABEL }}.log

  test_docker_nuctl:
    name: Test Docker nuctl
    runs-on: ubuntu-latest
    needs:
    - build_docker_images
    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run nuctl tests
      run: |
        docker login ${REPO} -u ${REPO_USER} -p ${{ github.token }}
        set -o pipefail
        make pull-docker-images test-docker-nuctl 2>&1 | tee test-docker-nuctl-${NUCLIO_LABEL}.log

    - name: Upload test results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: docker-test-results
        path: test-docker-nuctl-${{ env.NUCLIO_LABEL }}.log

  test_python:
    name: Test python
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Run python test
      run: |
        set -o pipefail
        make test-python 2>&1 | tee test-python-${NUCLIO_LABEL}.log

    - name: Upload test python results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-results
        path: test-python-${{ env.NUCLIO_LABEL }}.log
